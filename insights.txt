Explain how the app works and the different concepts that were used to learn faster.

    EXPRESS
* routes
* chaining routes (next())

    MIDDLEWARE
What is middelware?
Anything between the request and the response.

* serve public static files
* middleware (custom, built-in, 3rd parties)
* CORS
* request logs
* errors logs
* app.use
* app.all

    ROUTING
* purpose =  breaking the multiple routes from server into individual routers
* REST API 
    - created the /routes/api/users.js do demonstrate how REST API can be created with NodeJS and Express
    - on this routes we dont't need static files because we respond with json data from API

    MVC REST API
* we wont serve static files when creating a REST API - view directory will contain mostly 1-2 views
* the purpose of MVC is to separate the logic into multiple files, each of it handling specific task
* data is kept in the model folder
* controllers folder handles bussiness logic

//creating /users route to demonstrate how we can use Express to create a REST API. 
It is likely to use Express for this purpose rather than serve static files as we do in the previous routes


CORS
//use this middleware when you want your API to be fully available to the public
app.use(cors());
//BUT if you want to protect your API from specific origins, create allowed origins and provide it as cors options
app.use(cors(corsOptions));

MVC Rest API


We want to protect ourNode and Express API so we use JWT.

JWT - json web token = a form of user identification that is issued after the initial user authentication takes place

Access token 
- shorter period expiration 5-15 min
- send as JSON
- client stores it in memory (is lost when client is lost)
- Do NOT store in local storage or cookie (store in the current application state) - if it can be stored with JS a hacker could retrieve it with JS

1. Issued at Authorization
2. Client uses for API Access until expires
3. Verified with middleware
4. New token issued at Refresh request

Refresh token
- longer period expiration 1d-?days
- sent as httpOnly cookie
- not accesible via JavaScript
- must have expiration date

1. Issued at Authorization 
2. Client uses to request new Access token
3. Verified with endpoint and database
4. Must be allowed to expire or logout

Hazards:
XSS: Cross-Site Scripting
CSRF: CS Request Forgery


Authentication = the process of verifiyng who someone is.
Authorization = the process of verifiyng what resources a user has access to.

JSON Web tokens:
-> Confirm authorizarion
-> Allow access to API endpoints
-> Endpoints provide data resources
-> Use Authorization header

User roles & Permissions
-> provide different levels of access
-> sent in access token via payload
-> verified with middleware

MongoDB
 - is the "M" in the M(Mongo) E(Express) R(React) N(NodeJS) stack
 
* Traditional SQL databases are built in relational structure; related tables refference each other with joins as data is queried. This relational tables also normalize the data (D.R.Y), that means data is not duplicated in the table.

* With NoSQL databases like MongoDB relational tables and data normalization can be ignored.

MongoDB stores data in collections and individual records in collections are called documents. The documents have a key-value structure and look a lot like JSON. A collection holds all the data about a user, for example instead into breaking the data into related tables. Duplicating and distributing the data when neccessary is permitted in NoSQL databases.

example:
{
    _id: ObjectId("6168381e46424"),
    username: "silviu",
    password: "d12u38169#$&@hfdpwa",
    roles:{
        User: 2001,
        Editor: 1984
    },
    refreshToken: "dw8ydf98yd*&t^9ODGWQ98uhg"
}

Advantages:
-> Performance
-> Flexibility
-> Scalability
-> Usability

MongooseJs library to connect to db.

Mongoose Schemas and Data models.
